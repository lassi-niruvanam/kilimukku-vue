import {
  App,
  ComputedRef,
  Ref,
  computed,
  inject,
  onUnmounted,
  ref,
  watchEffect,
} from "vue";

import { எண்ணிக்கை } from "ennikkai";

import {
  குறிப்பின்_மதிப்பை_பெறு,
  குறிப்பு_அல்லது_மதிப்பு,
} from "./கருவிகள்.js";
import {
  nuchabäl_கண்டுப்பிடி,
  மொழிகளை_உருவாக்கு,
  மொழிகளைப்_பயன்படுத்து,
} from "./மொழிகள்.js";
import { விருப்பங்களை_பயன்படுத்து } from "./விருப்பங்கள்.js";

export const எண்ணிக்கையை_கண்டுப்பிடி = () => {
  const எண்ணிக்கை_ = inject<எண்ணிக்கை>("எண்ணிக்கை");
  if (!எண்ணிக்கை_) throw new Error("எண்ணிக்கை கிடைத்ததில்லை.");
  return எண்ணிக்கை_;
};

export const எண்களைப்_பயன்படுத்து = () => {
  const நம்ம_எண்ணிக்கை = எண்ணிக்கையை_கண்டுப்பிடி();
  const nuchabäl = nuchabäl_கண்டுப்பிடி();
  const { தேர்ந்தெடுத்தப்பட்ட_எண்ணுரு } = விருப்பங்களை_பயன்படுத்து();

  const { மொழி } = மொழிகளைப்_பயன்படுத்து();

  const தானியங்கி_எண்ணுரு = ref(
    nuchabäl.rajilanïkChabäl({ runuk: மொழி.value }),
  );
  let தானியங்கி_முறையை_மறந்துவிடு: (() => void) | undefined;

  watchEffect(() => {
    if (தானியங்கி_முறையை_மறந்துவிடு) தானியங்கி_முறையை_மறந்துவிடு();
    தானியங்கி_முறையை_மறந்துவிடு = nuchabäl?.tatzeqelbejRajilanïkChabäl({
      runuk: மொழி.value,
      sm: (மு?: string) => (தானியங்கி_எண்ணுரு.value = மு),
    });
  });

  onUnmounted(() => {
    if (தானியங்கி_முறையை_மறந்துவிடு) தானியங்கி_முறையை_மறந்துவிடு();
  });

  const எண்ணுரு_முறைமைகள் = ref(நம்ம_எண்ணிக்கை.முறைமைகள்);
  let முறைமைகளை_மறந்துவிடு: (() => void) | undefined;
  watchEffect(() => {
    முறைமைகளை_மறந்துவிடு = நம்ம_எண்ணிக்கை.முறைமைகளை_பின்பற்று({
      செ: (மு) => (எண்ணுரு_முறைமைகள்.value = மு),
    });
  });

  onUnmounted(() => {
    if (முறைமைகளை_மறந்துவிடு) முறைமைகளை_மறந்துவிடு();
  });

  const எண்ணுரு = computed(() => {
    return (
      தேர்ந்தெடுத்தப்பட்ட_எண்ணுரு.value || தானியங்கி_எண்ணுரு.value || "தமிழ்"
    );
  });

  const எண்ணை_வடிவூட்டு = (
    எண்: குறிப்பு_அல்லது_மதிப்பு<number | undefined>,
    முறைமை?: குறிப்பு_அல்லது_மதிப்பு<string>,
  ): ComputedRef<string | undefined> => {
    const வடிவூட்டப்பட்ட_எண் = computed(() => {
      const எண்_மதிப்பு = குறிப்பின்_மதிப்பை_பெறு(எண்);
      if (எண்_மதிப்பு === undefined) return undefined;
      try {
        return நம்ம_எண்ணிக்கை.உரைக்கு({
          எண்: எண்_மதிப்பு,
          மொழி: முறைமை ? குறிப்பின்_மதிப்பை_பெறு(முறைமை) : எண்ணுரு.value,
        });
      } catch {
        return undefined;
      }
    });
    return வடிவூட்டப்பட்ட_எண்;
  };

  const எண்_எழுத்து_வடிவூட்டு = (
    எண்: குறிப்பு_அல்லது_மதிப்பு<string>,
    முறைமை?: குறிப்பு_அல்லது_மதிப்பு<string>,
  ): ComputedRef<string> => {
    const வடிவூட்டப்பட்ட_எண்_எழுத்து = computed(() => {
      return [...குறிப்பின்_மதிப்பை_பெறு(எண்)]
        .map((இ) => {
          if (["", " ", "+", "-", "(", ")"].includes(இ)) return இ;
          try {
            const எண்_ = நம்ம_எண்ணிக்கை.எண்ணுக்கு({ உரை: இ });
            return நம்ம_எண்ணிக்கை.உரைக்கு({
              எண்: எண்_,
              மொழி: முறைமை ? குறிப்பின்_மதிப்பை_பெறு(முறைமை) : எண்ணுரு.value,
            });
          } catch {
            return இ;
          }
        })
        .join("");
    });
    return வடிவூட்டப்பட்ட_எண்_எழுத்து;
  };

  const பதிப்பை_வடிவூட்டு = (
    பதிப்பு: குறிப்பு_அல்லது_மதிப்பு<string>,
    முறைமை?: குறிப்பு_அல்லது_மதிப்பு<string>,
  ): Ref<string | undefined> => {
    const வடிவூட்டப்பட்ட_பதிப்பு = computed(() => {
      return குறிப்பின்_மதிப்பை_பெறு(பதிப்பு)
        .split(".")
        .map((இ) =>
          நம்ம_எண்ணிக்கை.உரைக்கு({
            எண்: parseInt(இ),
            மொழி: முறைமை ? குறிப்பின்_மதிப்பை_பெறு(முறைமை) : எண்ணுரு.value,
          }),
        )
        .join(".");
    });

    return வடிவூட்டப்பட்ட_பதிப்பு;
  };

  return {
    தேர்ந்தெடுத்தப்பட்ட_எண்ணுரு,
    எண்ணுரு,
    எண்ணுரு_முறைமைகள்,
    எண்ணை_வடிவூட்டு,
    எண்_எழுத்து_வடிவூட்டு,
    பதிப்பை_வடிவூட்டு,
  };
};

export const எண்களை_உருவாக்கு = ({
  மொழி,
  மாற்றுமொழிகள் = [],
  நினைவிகள்,
}: {
  மொழி: string;
  மாற்றுமொழிகள்?: string[];
  நினைவிகள்?: {
    மொழி?: string;
    எண்ணுரு?: string;
  };
}) => {
  return {
    install: (செயலி: App) => {
      const விண்மீன் = செயலி.config.globalProperties.$constl;
      const nuchabäl = செயலி.config.globalProperties.$nuchabäl;
      if (!nuchabäl) {
        const மொழிகள் = மொழிகளை_உருவாக்கு({ மொழி, மாற்றுமொழிகள், நினைவிகள் });
        செயலி.use(மொழிகள்);
      }
      const எண்ணிக்கை_ = new எண்ணிக்கை({ விண்மீன் });
      செயலி.provide("எண்ணிக்கை", எண்ணிக்கை_);
      செயலி.config.globalProperties.$எண்ணிக்கை = எண்ணிக்கை_;
    },
  };
};
