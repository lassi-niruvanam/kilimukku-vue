import { mount } from "@vue/test-utils";
import { afterAll, beforeAll, describe, test } from "vitest";

import கிளிமூக்கை_உருவாக்கு, { கிடைக்கும்_மொழிகளைப்_பயன்படுத்து, சாபிகளைப்_பயன்படுத்து, பரிந்துரைகளைப்_பயன்படுத்து, மொழி_முன்னேற்றத்தைப்_பயன்படுத்து, மொழிகளைப்_பயன்படுத்து, மொழிபெயர்ப்புகளைப்_பயன்படுத்து, மொழியாக்கத்தைப்_பயன்படுத்து } from "@/குறியீட்டு";
import விண்மீன்_உட்சேருகி from "./கருவிகள்/விண்மீன்-உட்சேருகி";
import { கிளிமூக்கு } from "@lassi-js/kilimukku";
import { constellation } from "@constl/utils-tests";
import { créerConstellation } from "@constl/ipa";
import type { Constellation, types } from "@constl/ipa";
import { இதற்காக_காற்றிரு } from "./கருவிகள்/கருவிகள்";


import மூல்_மொழிபெயர்ப்புகள் from "./வளங்கள்/மொழிபெயர்ப்புகள்.json" with { type: "json" };
import { computed, defineComponent, inject } from "vue";

const சோதனை_கூற்றை_பெறு = <T extends Record<string, any>>(அமைப்பு: ()=>T) => {
  window.localStorage.clear();
  // eslint-disable-next-line vue/one-component-per-file
  return defineComponent({
    setup() {
      return அமைப்பு()
    },
    render() {
      return "";
    },
  });
}

const கிளிமூக்குடன் = <T>({கூறு, விண்மீன், அடையாளம்,}: {கூறு: T, விண்மீன்: Constellation, அடையாளம்: string}) => {
  return mount(கூறு, {
    global: {
      plugins: [
        விண்மீன்_உட்சேருகி({ விண்மீன் }),
        கிளிமூக்கை_உருவாக்கு({
          மொழி: "த",
          மூல்_மொழிபெயர்ப்புகள்,
          அடையாளம்,
        }),
      ],
    },
  });
}

describe("கிளிமூக்கு", function () {
  let விண்மீனை_மறந்துவிடு: types.schémaFonctionOublier;
  let அடையாளம்: string;
  let விண்மீன்: Constellation
  
  beforeAll(async () => {
    const { clients, fOublier } = await constellation.créerConstellationsTest({
      n: 1,
      créerConstellation,
    });
    விண்மீனை_மறந்துவிடு = fOublier;
    விண்மீன் = clients[0];
    அடையாளம் = await கிளிமூக்கு.உருவாக்கு({ விண்மீன் });
  });

  afterAll(async () => {
    if (விண்மீனை_மறந்துவிடு) await விண்மீனை_மறந்துவிடு();
  });
  test("கிளிமூக்கு கிடைக்கும்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=>{
        return {
          கிளிமூக்கு: inject<கிளிமூக்கு>("கிளிமூக்கு")
        };
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்})
    expect(உறை.vm.கிளிமூக்கு).not.toBeUndefined();
  });

  test("கிடைக்கும் மொழி குறியீடுகள்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> கிடைக்கும்_மொழிகளைப்_பயன்படுத்து()
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்})
    expect(Array.isArray(உறை.vm.கிடைக்கும்_மொழி_குறியீடுகள்)).toBe(true);
    expect(உறை.vm.கிடைக்கும்_மொழி_குறியீடுகள்).toContain("த");
  });

  test("மொழிகளும் குறியீடுகளும்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> கிடைக்கும்_மொழிகளைப்_பயன்படுத்து()
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்})

    expect(Array.isArray(உறை.vm.மொழிகளும்_குறியீடுகளும்)).toBe(true);
    expect([
      ...new Set(
        உறை.vm.மொழிகளும்_குறியீடுகளும்
          .map((மொழி: { குறியீடு: string; மொழி: string }) => Object.keys(மொழி))
          .flat(),
      ),
    ]).toEqual(["குறியீடு", "மொழி"]);
  });

  test("மொழியின் பெயர்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const { மொழியின்_பெயர் } = கிடைக்கும்_மொழிகளைப்_பயன்படுத்து();
        return {மொழி_பெயர் : மொழியின்_பெயர்("ಕ")}
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்})
    expect(உறை.vm.மொழி_பெயர்).toBe("ಕನ್ನಡ");
  });

  test("மொழியின் முன்னேற்றம்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const { மொழி, மொழிகளை_தேர்ந்தெடுக்கொள்ளு } = மொழிகளைப்_பயன்படுத்து();
        const {மொழி_முன்னேற்றம்} = மொழி_முன்னேற்றத்தைப்_பயன்படுத்து({மொழி})
        return {மொழி_முன்னேற்றம், மொழிகளை_தேர்ந்தெடுக்கொள்ளு}
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்})

    expect(உறை.vm.மொழி_முன்னேற்றம்).toStrictEqual({
      அங்கீகரிக்கப்பட்டவை: 114,
      பரிந்துரைக்கப்பட்டவை: 0,
      மொத்தம்: 114,
    });
    உறை.vm.மொழிகளை_தேர்ந்தெடுக்கொள்ளு("ខ្ចែរ");
    await இதற்காக_காற்றிரு(
      () => உறை.vm.மொழி_முன்னேற்றம்?.அங்கீகரிக்கப்பட்டவை === 0,
    );
    expect(உறை.vm.மொழி_முன்னேற்றம்).toStrictEqual({
      அங்கீகரிக்கப்பட்டவை: 0,
      பரிந்துரைக்கப்பட்டவை: 0,
      மொத்தம்: 114,
    });
    உறை.vm.மொழிகளை_தேர்ந்தெடுக்கொள்ளு("த");
    await இதற்காக_காற்றிரு(
      () => உறை.vm.மொழி_முன்னேற்றம்?.அங்கீகரிக்கப்பட்டவை !== 0,
    );
    expect(உறை.vm.மொழி_முன்னேற்றம்).toStrictEqual({
      அங்கீகரிக்கப்பட்டவை: 114,
      பரிந்துரைக்கப்பட்டவை: 0,
      மொத்தம்: 114,
    });
  });

  test("சாபிகள்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const {சாபிகள்} = சாபிகளைப்_பயன்படுத்து()
        return {சாபிகள்}
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்})

    expect(உறை.vm.சாபிகள்).toStrictEqual([
      "விண்மீன்.பெயர்",
      "விண்மீன்.தலைப்பு",
      "சோதனை.பன்தன்மை",
      "சோதனை.தொடர்பு",
    ]);
  });

  test("பரிந்துரைகள்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const கிளிமூக்கு = inject<கிளிமூக்கு>("கிளிமூக்கு");
        const {பரிந்துரைகள்} = பரிந்துரைகளைப்_பயன்படுத்து();

        return {கிளிமூக்கு, பரிந்துரைகள்}
      }
    );
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்});

    உறை.vm.கிளிமூக்கு?.மொழிபெயர்ப்பை_பரிந்துரையு({
      சாபி: "விண்மீன்.பெயர்",
      மொழிபெயர்ப்பு: "តារានិករ",
      இலக்கு_மொழி: "ខ្ចែរ",
      மூல்_மொழி: "த",
      மூல்_உரை: "விண்மீன்",
    });
    await இதற்காக_காற்றிரு(() => !!உறை.vm.பரிந்துரைகள்.length);
    expect(உறை.vm.பரிந்துரைகள்).toStrictEqual([
      {
        அடையாளம்: உறை.vm.பரிந்துரைகள்[0].அடையாளம்,
        பங்கேற்பாளர்: உறை.vm.பரிந்துரைகள்[0].பங்கேற்பாளர்,
        பரிந்துரை: {
          இலக்கு_மொழி: "ខ្ចែរ",
          சாபி: "விண்மீன்.பெயர்",
          தேதி: உறை.vm.பரிந்துரைகள்[0].பரிந்துரை.தேதி,
          மூல்_உரை: "விண்மீன்",
          மூல்_மொழி: "த",
          மொழிபெயர்ப்பு: "តារានិករ",
        },
      },
    ]);
  });

  test("அங்கீகரிக்கப்பட்ட மொழிபெயர்ப்புகள்", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const {அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்புகள்} = மொழிபெயர்ப்புகளைப்_பயன்படுத்து();

        return {அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்புகள்}
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்});
    expect(உறை.vm.அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்புகள்).toStrictEqual({
      "சோதனை.தொடர்பு": {
        த: 'இது நம்ம தலைப்பு - "@:விண்மீன்.பெயர்"',
      },
      "சோதனை.பன்தன்மை": {
        த: "பூஜியம்|ஒன்று|இத்தனை {இ}",
      },
      "விண்மீன்.தலைப்பு": {
        த: "அறிவியலுக்காக விநியோகிக்கப்பட்ட தரவுத்தளங்கள்",
        ಕ: "ವಿಜ್ಞಾನಿಕ್ಕಾಗಿ ವಿತರಿಸಿದ ದತ್ತಾಂಶ",
      },
      "விண்மீன்.பெயர்": {
        த: "விண்மீன்",
        ಕ: "ನಕ್ಷತ್ರ",
      },
    });
  });

  test("மொழியாக்கம் பயன்படுத்து", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const {மொ} = மொழியாக்கத்தைப்_பயன்படுத்து();

        const தலைப்பு = மொ("விண்மீன்.பெயர்")

        return {தலைப்பு, மொ}
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்});
    await இதற்காக_காற்றிரு(() => உறை.vm.தலைப்பு !== "விண்மீன்.பெயர்");
    expect(உறை.vm.தலைப்பு).toBe("விண்மீன்");
  });

  test("புதுச பரிந்துரை", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const {மொ} = மொழியாக்கத்தைப்_பயன்படுத்து();
        const {
          மொழிகளை_தேர்ந்தெடுக்கொள்ளு,
        } = மொழிகளைப்_பயன்படுத்து();
        const தலைப்பு = மொ("விண்மீன்.பெயர்")

        return {மொழிகளை_தேர்ந்தெடுக்கொள்ளு, தலைப்பு}
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்});
    await இதற்காக_காற்றிரு(() => உறை.vm.தலைப்பு !== "விண்மீன்.பெயர்");
    
    உறை.vm.மொழிகளை_தேர்ந்தெடுக்கொள்ளு("ខ្ចែរ");
    await இதற்காக_காற்றிரு(() => உறை.vm.தலைப்பு !== "விண்மீன்");

    expect(உறை.vm.தலைப்பு).toBe("តារានិករ");
  });

  test("பன்தன்மை", async ({ expect }) => {
    window.localStorage.clear();
    // eslint-disable-next-line vue/one-component-per-file
    const கூறு =  defineComponent({
      props: {எத்தனை: {type: Number, required: true}},
      setup(சொத்துகள்) {
        const {
          மொழிகளை_தேர்ந்தெடுக்கொள்ளு,
        } = மொழிகளைப்_பயன்படுத்து();
        const {மொ} = மொழியாக்கத்தைப்_பயன்படுத்து();
        const பன்தன்மை = மொ("சோதனை.பன்தன்மை", computed(()=>சொத்துகள்.எத்தனை))
        return {
          மொழிகளை_தேர்ந்தெடுக்கொள்ளு,
          பன்தன்மை
        }
      },
      render() {
        return "";
      },
    });
    
    const உறை = mount(கூறு, {
      global: {
        plugins: [
          விண்மீன்_உட்சேருகி({ விண்மீன் }),
          கிளிமூக்கை_உருவாக்கு({
            மொழி: "த",
            மூல்_மொழிபெயர்ப்புகள்,
            அடையாளம்,
          }),
        ],
      },
      props: {
        எத்தனை: 0
      }
    });
    உறை.vm.மொழிகளை_தேர்ந்தெடுக்கொள்ளு("த");

    console.log("ici, ", உறை.vm.பன்தன்மை)
    await இதற்காக_காற்றிரு(() => உறை.vm.பன்தன்மை !== "சோதனை.பன்தன்மை");
    expect(உறை.vm.பன்தன்மை).toBe("பூஜியம்");

    உறை.setProps({ எத்தனை: 1 });
    console.log("ici, ", உறை.vm.பன்தன்மை)
    await இதற்காக_காற்றிரு(() => உறை.vm.பன்தன்மை !== "பூஜியம்");
    expect(உறை.vm.பன்தன்மை).toBe("ஒன்று");

    உறை.setProps({ எத்தனை: 3 });
    console.log("ici, ", உறை.vm.பன்தன்மை)
    await இதற்காக_காற்றிரு(() => உறை.vm.பன்தன்மை !== "ஒன்று");
    expect(உறை.vm.பன்தன்மை).toBe("இத்தனை ௩");
  });

  test("தொடர்பு", async ({ expect }) => {
    const கூறு = சோதனை_கூற்றை_பெறு(
      ()=> {
        const {
          மொழிகளை_தேர்ந்தெடுக்கொள்ளு,
        } = மொழிகளைப்_பயன்படுத்து();
        const {மொ} = மொழியாக்கத்தைப்_பயன்படுத்து();

        const தொடர்பு = மொ("சோதனை.தொடர்பு")

        return {
          மொழிகளை_தேர்ந்தெடுக்கொள்ளு,
          தொடர்பு,
        }
      }
    )
    const உறை = கிளிமூக்குடன்({கூறு, விண்மீன், அடையாளம்});
    உறை.vm.மொழிகளை_தேர்ந்தெடுக்கொள்ளு("த");

    await இதற்காக_காற்றிரு(
      () =>
        உறை.vm.தொடர்பு !== "சோதனை.தொடர்பு" &&
        !உறை.vm.தொடர்பு.includes("விண்மீன்.பெயர்"),
    );
    expect(உறை.vm.தொடர்பு).toBe(
      'இது நம்ம தலைப்பு - "விண்மீன்"',
    );
  });
});
